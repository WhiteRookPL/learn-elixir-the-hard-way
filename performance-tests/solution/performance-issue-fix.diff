diff --git a/apps/air_quality/lib/air_quality/cache/preprocessed_cache.ex b/apps/air_quality/lib/air_quality/cache/preprocessed_cache.ex
index a015a53..bce7c00 100644
--- a/apps/air_quality/lib/air_quality/cache/preprocessed_cache.ex
+++ b/apps/air_quality/lib/air_quality/cache/preprocessed_cache.ex
@@ -5,8 +5,6 @@ defmodule AirQuality.Cache.PreprocessedCacheServer do

   use GenServer

-  import AirQuality.Utilities.GeoHash, only: [is_geohash_inside_another_one?: 2]
-
   ### Client API

   @doc """
@@ -53,10 +51,22 @@ defmodule AirQuality.Cache.PreprocessedCacheServer do
   def init(:ok) do
     {:ok, cities} = AirQuality.Utilities.Preprocessing.process_cities

-    {:ok, gios_stations} = AirQuality.Utilities.Preprocessing.process_stations("gios")
     {:ok, airly_stations} = AirQuality.Utilities.Preprocessing.process_stations("airly")
+    {:ok, gios_stations} = AirQuality.Utilities.Preprocessing.process_stations("gios")
+
+    cities_table = :ets.new(__MODULE__, [:private, :duplicate_bag])
+    airly_stations_table = :ets.new(__MODULE__, [:private, :duplicate_bag])
+    gios_stations_table = :ets.new(__MODULE__, [:private, :duplicate_bag])
+
+    insert_entries(cities_table, cities)
+    insert_entries(airly_stations_table, airly_stations)
+    insert_entries(gios_stations_table, gios_stations)
+
+    {:ok, {cities_table, airly_stations_table, gios_stations_table}}
+  end

-    {:ok, %{ cities: cities, gios: gios_stations, airly: airly_stations }}
+  defp insert_entries(table, list) do
+    Enum.each(list, fn(entry) -> :ets.insert(table, {entry[:geohash], entry}) end)
   end

   @doc """
@@ -68,22 +78,22 @@ defmodule AirQuality.Cache.PreprocessedCacheServer do
   - {:airly_station_from, geohash} - for getting Airly station ID based on given `geohash`,
   - {:gios_station_from, geohash} - for getting GIOÅš station ID based on given `geohash`.
   """
-  def handle_call({:city_from, geohash}, _from, %{ cities: cities } = state) do
-    {:reply, single_by_geohash(cities, geohash), state}
+  def handle_call({:city_from, geohash}, _from, {cities_table, _, _} = state) do
+    {:reply, fetch(cities_table, geohash), state}
   end

-  def handle_call({:airly_station_from, geohash}, _from, %{ airly: stations } = state) do
-    {:reply, single_by_geohash(stations, geohash), state}
+  def handle_call({:airly_station_from, geohash}, _from, {_, airly_stations_table, _} = state) do
+    {:reply, fetch(airly_stations_table, geohash), state}
   end

-  def handle_call({:gios_station_from, geohash}, _from, %{ gios: stations } = state) do
-    {:reply, single_by_geohash(stations, geohash), state}
+  def handle_call({:gios_station_from, geohash}, _from, {_, _, gios_stations_table} = state) do
+    {:reply, fetch(gios_stations_table, geohash), state}
   end

-  defp single_by_geohash(list, geohash) do
-    case Enum.filter(list, fn(entity) -> is_geohash_inside_another_one?(geohash, entity[:geohash]) end) do
-      []         -> :error
-      results    -> hd(results)
+  defp fetch(table, geohash) do
+    case :ets.lookup(table, String.slice(geohash, 0, 5)) do
+      [{_, value} | _] -> value
+      []               -> :error
     end
   end
 end
